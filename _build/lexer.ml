# 4 "lexer.mll"
 
  open Lexing
  open Parser 
  open Lexerhack
   
  exception Lexing_error of string

  (* tables des mots-clés *)
  let kwd_tbl = 
    ["class", CLASS; "else", ELSE; "false", FALSE;
     "if", IF; "for", FOR; "int", INT; "new", NEW;
     "NULL", NULL; "public", PUBLIC;
     "return", RETURN; "this", THIS; "true", TRUE;  "virtual", VIRTUAL; "void", VOID; "while", WHILE
    ]


  let id_or_kwd = 
    let h = Hashtbl.create 17 in
    List.iter (fun (s,t) -> Hashtbl.add h s t) kwd_tbl;
    fun s -> 
      try Hashtbl.find h s with _ -> if Hashtbl.mem table s then TIDENT s else IDENT s

  let newline lexbuf =
    let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <- 
      { pos with pos_lnum = pos.pos_lnum + 1; pos_bol = pos.pos_cnum }


# 31 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\216\255\217\255\078\000\088\000\221\255\222\255\223\255\
    \224\255\225\255\020\000\002\000\003\000\237\255\049\000\239\255\
    \001\000\049\000\032\000\244\255\100\000\086\000\247\255\248\255\
    \249\255\043\000\115\000\192\000\004\000\255\255\011\001\086\001\
    \036\000\050\000\039\000\034\000\036\000\250\255\043\000\055\000\
    \047\000\039\000\057\000\057\000\146\000\099\000\055\000\050\000\
    \058\000\058\000\061\000\075\000\080\000\070\000\145\000\252\255\
    \104\000\100\000\123\000\123\000\136\000\150\000\155\000\144\000\
    \192\000\251\255\233\255\246\255\241\255\245\255\229\255\242\255\
    \228\255\219\255\220\255\231\255\230\255\227\255\161\001\184\001\
    \199\001\241\000\253\255\254\255\208\000\255\255\018\001\253\255\
    \254\255\255\255\014\002\246\255\247\255\248\255\249\255\108\002\
    \095\002\252\255\253\255\254\255\255\255\181\002\251\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\037\000\037\000\255\255\255\255\255\255\
    \255\255\255\255\039\000\029\000\023\000\255\255\017\000\255\255\
    \015\000\019\000\012\000\255\255\020\000\021\000\255\255\255\255\
    \255\255\039\000\002\000\002\000\001\000\255\255\002\000\002\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\037\000\
    \037\000\255\255\255\255\255\255\001\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\000\000\255\255\000\000\
    \255\255\255\255\255\255\000\000\255\255\255\255\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\083\000\000\000\000\000\255\255\000\000\088\000\000\000\
    \000\000\000\000\091\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\028\000\029\000\000\000\000\000\028\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \028\000\018\000\024\000\025\000\028\000\013\000\016\000\072\000\
    \009\000\008\000\015\000\017\000\007\000\020\000\019\000\014\000\
    \004\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\006\000\005\000\021\000\011\000\012\000\076\000\
    \075\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\074\000\071\000\070\000\033\000\026\000\
    \073\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\027\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\023\000\010\000\022\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \077\000\068\000\067\000\066\000\038\000\034\000\035\000\036\000\
    \037\000\039\000\040\000\041\000\042\000\043\000\044\000\056\000\
    \047\000\048\000\069\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\049\000\050\000\051\000\
    \052\000\053\000\045\000\054\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\046\000\055\000\
    \078\000\057\000\026\000\058\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\059\000\060\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\061\000\062\000\063\000\064\000\065\000\085\000\
    \002\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\084\000\089\000\000\000\000\000\026\000\
    \000\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\030\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\000\000\000\000\
    \000\000\000\000\026\000\000\000\026\000\026\000\026\000\031\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \032\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\000\000\000\000\000\000\000\000\026\000\000\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \000\000\082\000\000\000\000\000\000\000\000\000\000\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\000\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\000\000\000\000\
    \000\000\000\000\087\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\093\000\093\000\
    \094\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\095\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\098\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\000\000\000\000\
    \097\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\100\000\000\000\000\000\000\000\000\000\000\000\
    \099\000\000\000\000\000\000\000\096\000\102\000\102\000\102\000\
    \102\000\102\000\102\000\102\000\102\000\102\000\102\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\102\000\102\000\
    \102\000\102\000\102\000\102\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\092\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\102\000\102\000\
    \102\000\102\000\102\000\102\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\028\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\028\000\000\000\000\000\016\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
    \012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\014\000\017\000\018\000\032\000\000\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \010\000\020\000\021\000\021\000\025\000\033\000\034\000\035\000\
    \036\000\038\000\039\000\040\000\041\000\042\000\043\000\045\000\
    \046\000\047\000\020\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\048\000\049\000\050\000\
    \051\000\052\000\044\000\053\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\044\000\054\000\
    \004\000\056\000\026\000\057\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\058\000\059\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\060\000\061\000\062\000\063\000\064\000\084\000\
    \000\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\081\000\086\000\255\255\255\255\027\000\
    \255\255\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\255\255\255\255\
    \255\255\255\255\030\000\255\255\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\255\255\255\255\255\255\255\255\255\255\255\255\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\255\255\255\255\255\255\255\255\031\000\255\255\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\078\000\078\000\078\000\078\000\078\000\078\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \255\255\081\000\255\255\255\255\255\255\255\255\255\255\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\255\255\078\000\078\000\078\000\078\000\078\000\078\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\255\255\255\255\
    \255\255\255\255\086\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \080\000\080\000\080\000\080\000\080\000\080\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\095\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \096\000\096\000\096\000\096\000\096\000\096\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \096\000\096\000\096\000\096\000\096\000\096\000\255\255\255\255\
    \095\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\095\000\255\255\255\255\255\255\255\255\255\255\
    \095\000\255\255\255\255\255\255\095\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\101\000\101\000\
    \101\000\101\000\101\000\101\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\090\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\101\000\101\000\
    \101\000\101\000\101\000\101\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 45 "lexer.mll"
            ( newline lexbuf; token lexbuf )
# 336 "lexer.ml"

  | 1 ->
# 46 "lexer.mll"
            ( token lexbuf )
# 341 "lexer.ml"

  | 2 ->
let
# 47 "lexer.mll"
             id
# 347 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 47 "lexer.mll"
                ( id_or_kwd id )
# 351 "lexer.ml"

  | 3 ->
# 48 "lexer.mll"
                         ( INCLUDEIOS )
# 356 "lexer.ml"

  | 4 ->
# 49 "lexer.mll"
                          ( INCLUDEIOS )
# 361 "lexer.ml"

  | 5 ->
# 50 "lexer.mll"
                ( STDCOUT )
# 366 "lexer.ml"

  | 6 ->
# 51 "lexer.mll"
            ( CHAINE (String.concat "" (chaine lexbuf) ))
# 371 "lexer.ml"

  | 7 ->
# 52 "lexer.mll"
            ( LACC )
# 376 "lexer.ml"

  | 8 ->
# 53 "lexer.mll"
            ( RACC )
# 381 "lexer.ml"

  | 9 ->
# 54 "lexer.mll"
            ( CHEVRON )
# 386 "lexer.ml"

  | 10 ->
# 55 "lexer.mll"
            ( SDEREF )
# 391 "lexer.ml"

  | 11 ->
# 56 "lexer.mll"
            ( DOT )
# 396 "lexer.ml"

  | 12 ->
# 57 "lexer.mll"
            ( NOT )
# 401 "lexer.ml"

  | 13 ->
# 58 "lexer.mll"
            ( INCR )
# 406 "lexer.ml"

  | 14 ->
# 59 "lexer.mll"
            ( DECR )
# 411 "lexer.ml"

  | 15 ->
# 60 "lexer.mll"
            ( ADDR )
# 416 "lexer.ml"

  | 16 ->
# 61 "lexer.mll"
            ( TIMES )
# 421 "lexer.ml"

  | 17 ->
# 62 "lexer.mll"
            ( DIV )
# 426 "lexer.ml"

  | 18 ->
# 63 "lexer.mll"
            ( MODULO)
# 431 "lexer.ml"

  | 19 ->
# 64 "lexer.mll"
            ( PLUS )
# 436 "lexer.ml"

  | 20 ->
# 65 "lexer.mll"
            ( MINUS )
# 441 "lexer.ml"

  | 21 ->
# 66 "lexer.mll"
            ( LT )
# 446 "lexer.ml"

  | 22 ->
# 67 "lexer.mll"
             ( LE )
# 451 "lexer.ml"

  | 23 ->
# 68 "lexer.mll"
            ( GT )
# 456 "lexer.ml"

  | 24 ->
# 69 "lexer.mll"
             ( GE )
# 461 "lexer.ml"

  | 25 ->
# 70 "lexer.mll"
             ( EQ )
# 466 "lexer.ml"

  | 26 ->
# 71 "lexer.mll"
             ( NEQ )
# 471 "lexer.ml"

  | 27 ->
# 72 "lexer.mll"
             (AND)
# 476 "lexer.ml"

  | 28 ->
# 73 "lexer.mll"
            (OR)
# 481 "lexer.ml"

  | 29 ->
# 74 "lexer.mll"
            (ASSIGN)
# 486 "lexer.ml"

  | 30 ->
# 75 "lexer.mll"
            ( LPAR )
# 491 "lexer.ml"

  | 31 ->
# 76 "lexer.mll"
            ( RPAR )
# 496 "lexer.ml"

  | 32 ->
# 77 "lexer.mll"
            ( COMMA )
# 501 "lexer.ml"

  | 33 ->
# 78 "lexer.mll"
            ( COLON )
# 506 "lexer.ml"

  | 34 ->
# 79 "lexer.mll"
            ( SEMICOLON )
# 511 "lexer.ml"

  | 35 ->
# 80 "lexer.mll"
            ( comment lexbuf )
# 516 "lexer.ml"

  | 36 ->
# 81 "lexer.mll"
            ( commentendl lexbuf)
# 521 "lexer.ml"

  | 37 ->
let
# 82 "lexer.mll"
               s
# 527 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 82 "lexer.mll"
                 ( INTEGER (int_of_string s) )
# 531 "lexer.ml"

  | 38 ->
# 83 "lexer.mll"
            ( EOF )
# 536 "lexer.ml"

  | 39 ->
let
# 84 "lexer.mll"
         c
# 542 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 84 "lexer.mll"
            ( raise (Lexing_error ("illegal character: " ^ String.make 1 c)) )
# 546 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 81
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 88 "lexer.mll"
            ( token lexbuf )
# 557 "lexer.ml"

  | 1 ->
# 89 "lexer.mll"
            ( comment lexbuf )
# 562 "lexer.ml"

  | 2 ->
# 90 "lexer.mll"
            ( raise (Lexing_error ("unterminated comment")) )
# 567 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and commentendl lexbuf =
    __ocaml_lex_commentendl_rec lexbuf 86
and __ocaml_lex_commentendl_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 93 "lexer.mll"
         ( newline lexbuf ; token lexbuf )
# 578 "lexer.ml"

  | 1 ->
# 94 "lexer.mll"
       (commentendl lexbuf)
# 583 "lexer.ml"

  | 2 ->
# 95 "lexer.mll"
        (EOF)
# 588 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_commentendl_rec lexbuf __ocaml_lex_state

and chaine lexbuf =
    __ocaml_lex_chaine_rec lexbuf 90
and __ocaml_lex_chaine_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 98 "lexer.mll"
            ( "\n"::(chaine lexbuf) )
# 599 "lexer.ml"

  | 1 ->
# 99 "lexer.mll"
            ( "\t"::(chaine lexbuf) )
# 604 "lexer.ml"

  | 2 ->
# 100 "lexer.mll"
            ( "\""::(chaine lexbuf) )
# 609 "lexer.ml"

  | 3 ->
# 101 "lexer.mll"
            ( "\\"::(chaine lexbuf) )
# 614 "lexer.ml"

  | 4 ->
let
# 102 "lexer.mll"
                                  s
# 620 "lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) (lexbuf.Lexing.lex_start_pos + 4) in
# 102 "lexer.mll"
                                      ( (String.make 1 (char_of_int (int_of_string ("0x" ^ s) ) ))::(chaine lexbuf) )
# 624 "lexer.ml"

  | 5 ->
# 103 "lexer.mll"
            ( chaine lexbuf )
# 629 "lexer.ml"

  | 6 ->
# 104 "lexer.mll"
            ( [] )
# 634 "lexer.ml"

  | 7 ->
let
# 105 "lexer.mll"
                    c
# 640 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 105 "lexer.mll"
                      ( (String.make 1 c)::(chaine lexbuf) )
# 644 "lexer.ml"

  | 8 ->
# 106 "lexer.mll"
            ( raise (Lexing_error "End of file before a string is finished.") )
# 649 "lexer.ml"

  | 9 ->
# 107 "lexer.mll"
            ( raise (Lexing_error "Invalid char inside a string.") )
# 654 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_chaine_rec lexbuf __ocaml_lex_state

;;

