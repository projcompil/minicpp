### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules main.ml > main.ml.depends # cached
# Target: compilateur.ml.depends, tags: { extension:ml, file:compilateur.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules compilateur.ml > compilateur.ml.depends # cached
# Target: ast.mli.depends, tags: { extension:mli, file:ast.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules ast.mli > ast.mli.depends # cached
# Target: ast.cmi, tags: { byte, compile, extension:mli, file:ast.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o ast.cmi ast.mli # cached
# Target: mips.mli.depends, tags: { extension:mli, file:mips.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules mips.mli > mips.mli.depends # cached
# Target: mips.cmi, tags: { byte, compile, extension:mli, file:mips.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o mips.cmi mips.mli # cached
# Target: typing.ml.depends, tags: { extension:ml, file:typing.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules typing.ml > typing.ml.depends # cached
# Target: lexerhack.ml.depends, tags: { extension:ml, file:lexerhack.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules lexerhack.ml > lexerhack.ml.depends # cached
# Target: lexerhack.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexerhack.cmo, file:lexerhack.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o lexerhack.cmo lexerhack.ml # cached
# Target: typing.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:typing.cmo, file:typing.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o typing.cmo typing.ml # cached
# Target: compilateur.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:compilateur.cmo, file:compilateur.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o compilateur.cmo compilateur.ml # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly.depends, tags: { extension:mly, file:parser.mly, menhir_ocamldep, ocaml, ocamldep, quiet }
menhir --raw-depend --ocamldep '/usr/bin/ocamldep -modules' parser.mly > parser.mly.depends # cached
# Target: parser.mly, tags: { byte, compile, extension:mly, file:parser.mly, menhir, ocaml, parser, quiet }
menhir --ocamlc /usr/bin/ocamlc --infer parser.mly # cached
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o lexer.cmo lexer.ml # cached
# Target: main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o main.cmo main.ml # cached
# Target: mips.ml.depends, tags: { extension:ml, file:mips.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules mips.ml > mips.ml.depends # cached
# Target: mips.cmx, tags: { compile, extension:cmx, extension:ml, file:mips.cmx, file:mips.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o mips.cmx mips.ml # cached
# Target: lexerhack.cmx, tags: { compile, extension:cmx, extension:ml, file:lexerhack.cmx, file:lexerhack.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o lexerhack.cmx lexerhack.ml # cached
# Target: typing.cmx, tags: { compile, extension:cmx, extension:ml, file:typing.cmx, file:typing.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o typing.cmx typing.ml # cached
# Target: compilateur.cmx, tags: { compile, extension:cmx, extension:ml, file:compilateur.cmx, file:compilateur.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o compilateur.cmx compilateur.ml # cached
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o parser.cmx parser.ml # cached
# Target: lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o lexer.cmx lexer.ml # cached
# Target: main.cmx, tags: { compile, extension:cmx, extension:ml, file:main.cmx, file:main.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o main.cmx main.ml # cached
# Target: main.native, tags: { dont_link_with, extension:native, file:main.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt lexerhack.cmx mips.cmx typing.cmx compilateur.cmx parser.cmx lexer.cmx main.cmx -o main.native # cached
# Compilation successful.
